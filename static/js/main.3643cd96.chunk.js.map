{"version":3,"sources":["store/actions.js","store/index.js","components/Header/Header.js","components/Sidebar/index.js","components/Sidebar/Sidebar.js","components/Card/Card.js","components/ListCocktail/index.js","components/ListCocktail/ListCocktail.js","App.js","serviceWorker.js","index.js"],"names":["ACTION_TYPES","setError","error","type","payload","componentEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","thunk","initialState","listCocktail","listType","store","createStore","state","action","map","title","strCategory","sort","applyMiddleware","Header","className","src","alt","mapDispatch2Props","loadDataListType","dispatch","fetch","method","then","res","json","drinks","catch","message","saveListType","data","Enhanced","connect","props","useState","currentSort","setCurrentSort","showSidebar","setShowSidebar","useEffect","onClick","index","key","value","onChange","Card","id","img","loadDataListCocktail","param","uuid","loaded","setLoaded","length","a","async","forEach","processArray","cockyail","find","drink","idDrink","strDrink","strDrinkThumb","App","StopPosition","ShowAtPosition","EasingType","AnimationDuration","ContainerClassName","TransitionClassName","style","width","height","backgroundColor","outline","borderRadius","boxShadow","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3643cd96.chunk.js","sourcesContent":["import uuid from 'uuid/v1';\nconst API_URL_LIST_COCKTAIL = 'https://www.thecocktaildb.com/api/json/v1/1/filter.php';\nconst API_URL_LIST = 'https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list';\n\n\nexport const ACTION_TYPES = {\n  SAVE_LIST_COCKTAIL: 'SAVE_LIST_COCKTAIL',\n  SAVE_LOADED_LIST_TYPE: 'SAVE_LOADED_LIST_TYPE',\n  SAVE_LIST_TYPE: 'SAVE_LIST_TYPE',\n  SET_LOAD_ERROR: 'SET_LOAD_ERROR',\n};\n\nconst saveListCocktail = data => ({\n  type: ACTION_TYPES.SAVE_LIST_COCKTAIL,\n  payload: data,\n});\n\nconst setError = error => ({\n  type: ACTION_TYPES.SET_LOAD_ERROR,\n  payload: error,\n});\n\nconst saveLoadedListType = data => ({\n  type: ACTION_TYPES.SAVE_LOADED_LIST_TYPE,\n  payload: data,\n});\n\nexport const saveListType = data => ({\n  type: ACTION_TYPES.SAVE_LIST_TYPE,\n  payload: data,\n});\n\nexport const loadDataListType = () => dispatch => {\n  fetch(API_URL_LIST, {\n    method: 'GET'\n  })\n    .then(res => res.json())\n    .then(({drinks}) => dispatch(saveLoadedListType(drinks)))\n    .catch(error => dispatch(setError(error.message)))\n};\n\nexport const loadDataListCocktail = param => dispatch => {\n  fetch(`${API_URL_LIST_COCKTAIL}?c=${param}`, {\n    method: 'GET'\n  })\n    .then(res => res.json())\n    .then(({ drinks }) => dispatch(saveListCocktail({type: param, drinks, id: uuid()})))\n    .catch(error => dispatch(setError(error.message)))\n};\n\n","import { createStore, compose, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { ACTION_TYPES } from \"./actions\";\r\n\r\nconst componentEnhancer =\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst middleware = [thunk];\r\nconst initialState = {\r\n  listCocktail: [],\r\n  listType: null,\r\n  error: null\r\n};\r\n\r\nfunction reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ACTION_TYPES.SAVE_LIST_COCKTAIL: {\r\n      const { payload } = action;\r\n    \r\n      return {\r\n        ...state,\r\n        error: null,\r\n        listCocktail: [...state.listCocktail, payload]\r\n      };\r\n    }\r\n\r\n    case ACTION_TYPES.SAVE_LOADED_LIST_TYPE: {\r\n      const { payload } = action;\r\n      const listType = payload.map( type => ({\r\n        title: type.strCategory,\r\n        sort: true,\r\n      }));\r\n\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        listType: listType\r\n      };\r\n    }\r\n\r\n    case ACTION_TYPES.SAVE_LIST_TYPE: {\r\n      const { payload } = action;\r\n\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        listType: payload\r\n      };\r\n    }\r\n\r\n    case ACTION_TYPES.SET_LOAD_ERROR: {\r\n      const { payload } = action;\r\n\r\n      return {\r\n        ...state,\r\n        error: payload\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const store = createStore(\r\n  reducer,\r\n  componentEnhancer(applyMiddleware(...middleware))\r\n);\r\n","import React from 'react'\r\nimport './Header.scss'\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className='header'>\r\n      <p className='header__title'>Coctail DB</p>\r\n      <img className='header__icone' src='./photos/cocktail header.svg' alt='cocktail header' />\r\n    </div>\r\n  )\r\n}\r\n","import { connect } from 'react-redux';\r\nimport Sidebar from './Sidebar';\r\nimport { loadDataListType, saveListType} from '../../store/actions';\r\n\r\nfunction mapState2Props(state) {\r\n  return {\r\n    listType: state.listType,\r\n  };\r\n}\r\n\r\nconst mapDispatch2Props = {\r\n  loadDataListType,\r\n  saveListType,\r\n};\r\n\r\nconst Enhanced = connect(\r\n  mapState2Props,\r\n  mapDispatch2Props,\r\n)(Sidebar);\r\n\r\nexport { Enhanced as Sidebar };","import React, { useEffect, useState } from \"react\";\r\n\r\nimport \"./Sidebar.scss\";\r\n\r\nexport default function Sidebar(props) {\r\n  const { loadDataListType, listType, saveListType } = props;\r\n\r\n  const [currentSort, setCurrentSort] = useState(false);\r\n  const [showSidebar, setShowSidebar] = useState(true)\r\n\r\n  useEffect(() => {\r\n    if (!currentSort) {\r\n      loadDataListType();\r\n      setCurrentSort(listType);\r\n    }\r\n  }, [currentSort, listType, loadDataListType]);\r\n\r\n  const handelListType = title => {\r\n    setCurrentSort(\r\n      currentSort.map(type =>\r\n        type.title === title ? { title: type.title, sort: !type.sort } : type\r\n      )\r\n    );\r\n  };\r\n\r\n  if (currentSort) {\r\n    return (\r\n      <div>\r\n        <div onClick={() => setShowSidebar(!showSidebar)} className=\"sidebar-menu__header\">\r\n          <img\r\n            className={`sidebar-menu__arrow ${showSidebar ? 'active' : ''}`}\r\n            alt=\"arrow\"\r\n            src=\"./photos/arrow.svg\"\r\n          />\r\n        </div>\r\n        <div className={`sidebar-menu ${showSidebar ? 'active' : ''}`}>\r\n          {currentSort.map((type, index) => {\r\n            return (\r\n              <label className=\"sidebar-menu__item\" key={type + index}>\r\n                <input\r\n                  value={type.sort}\r\n                  onChange={() => handelListType(type.title)}\r\n                  className=\"sidebar-menu__inputDefault\"\r\n                  type=\"checkbox\"\r\n                />\r\n                {type.sort ? (\r\n                  <img\r\n                    alt={type.title + type.sort}\r\n                    src=\"./photos/inputTrue.svg\"\r\n                    className=\"sidebar-menu__input\"\r\n                  />\r\n                ) : (\r\n                  <img\r\n                    alt={type.title + type.sort}\r\n                    src=\"./photos/inputFalse.svg\"\r\n                    className=\"sidebar-menu__input\"\r\n                  />\r\n                )}\r\n                <span className=\"sidebar-menu__title\">{type.title}</span>\r\n              </label>\r\n            );\r\n          })}\r\n          <button\r\n            onClick={() => saveListType(currentSort)}\r\n            className=\"sidebar-menu__button\"\r\n          >\r\n            APPLY\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n","import React from 'react'\r\nimport './Card.scss'\r\n\r\nexport default function Card(props) {\r\n  const {id, img, title} = props;\r\n  return (\r\n    <div className='card'>\r\n      <img className='card__img' src={img} alt={title} />\r\n      <p className='card__title'>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","import { connect } from 'react-redux';\r\nimport ListCocktail from './ListCocktail';\r\nimport { loadDataListCocktail } from '../../store/actions';\r\n\r\nfunction mapState2Props(state) {\r\n  return {\r\n    listCocktail: state.listCocktail,\r\n    listType: state.listType,\r\n    error: state.error,\r\n  };\r\n}\r\n\r\nconst mapDispatch2Props = {\r\n  loadDataListCocktail,\r\n};\r\n\r\nconst Enhanced = connect(\r\n  mapState2Props,\r\n  mapDispatch2Props,\r\n)(ListCocktail);\r\n\r\nexport { Enhanced as ListCocktail };","import React, { useState, useEffect } from \"react\";\r\nimport Card from \"../Card/Card.js\";\r\nimport \"./ListCocktail.scss\";\r\n\r\nexport default function ListCocktail(props) {\r\n  const { loadDataListCocktail, listCocktail, listType, error } = props;\r\n\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function processArray(listType) {\r\n      setLoaded(true);\r\n      listType.forEach(async type => {\r\n        await loadDataListCocktail(type.title);\r\n      });\r\n    }\r\n\r\n    if (listType && !listCocktail.length && !loaded) {\r\n      processArray(listType);\r\n    }\r\n  }, [listCocktail.length, listType, loadDataListCocktail, loaded]);\r\n\r\n  if (error) {\r\n    return <h3>Пожалуйста перезагрузите страницу</h3>;\r\n  }\r\n  return (\r\n    <div>\r\n      {listCocktail.map((cockyail, index) => {\r\n        return listType.find(type => type.title === cockyail.type).sort ? (\r\n          <div key={cockyail.id} className=\"list-cocktail\">\r\n            <p className=\"list-cocktail__heading\">{cockyail.type}</p>\r\n            <div className=\"list-cocktail__card\">\r\n              {cockyail.drinks.map(drink => (\r\n                <Card\r\n                  key={drink.idDrink}\r\n                  title={drink.strDrink}\r\n                  img={drink.strDrinkThumb}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ) : null;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport ScrollUpButton from 'react-scroll-up-button';\n\nimport Header from './components/Header/Header'\nimport { Sidebar } from './components/Sidebar/index'\nimport { ListCocktail } from './components/ListCocktail/index'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Header />\n        <main className='main'>\n          <Sidebar />\n          <ListCocktail />\n        </main>\n        <ScrollUpButton\n        StopPosition={0}\n        ShowAtPosition={150}\n        EasingType=\"easeOutCubic\"\n        AnimationDuration={200}\n        ContainerClassName=\"ScrollUpButton__Container\"\n        TransitionClassName=\"ScrollUpButton__Toggled\"\n        style={{\n          width: \"36px\",\n          height: \"36px\",\n          backgroundColor: \"#59BD5A\",\n          outline: \"none\",\n          borderRadius: \"18px\",\n          boxShadow: \"0 2px 4px 0 #9b9b9b\"\n        }}\n      />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}